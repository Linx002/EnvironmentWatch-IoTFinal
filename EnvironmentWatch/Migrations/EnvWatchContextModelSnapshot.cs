// <auto-generated />
using System;
using EnvironmentWatch.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EnvironmentWatch.Migrations
{
    [DbContext(typeof(EnvWatchContext))]
    partial class EnvWatchContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-preview.7.20365.15");

            modelBuilder.Entity("EnvironmentWatch.Models.DeviceType", b =>
                {
                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceTypeId");

                    b.ToTable("DeviceType");
                });

            modelBuilder.Entity("EnvironmentWatch.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("EnvironmentWatch.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeasuredDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MeasuredValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MeasurementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReportingDeviceId")
                        .HasColumnType("int");

                    b.HasKey("MeasurementId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("ReportingDeviceId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("EnvironmentWatch.Models.MeasurementType", b =>
                {
                    b.Property<int>("MeasurementTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeasurementTypeId");

                    b.ToTable("MeasurementType");
                });

            modelBuilder.Entity("EnvironmentWatch.Models.ReportingDevice", b =>
                {
                    b.Property<int>("ReportingDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportingDeviceId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("LocationId");

                    b.ToTable("ReportingDevice");
                });

            modelBuilder.Entity("EnvironmentWatch.Models.Measurement", b =>
                {
                    b.HasOne("EnvironmentWatch.Models.Location", "Location")
                        .WithMany("Measurements")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnvironmentWatch.Models.MeasurementType", "MeasurementType")
                        .WithMany("Measurements")
                        .HasForeignKey("MeasurementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnvironmentWatch.Models.ReportingDevice", "ReportingDevice")
                        .WithMany("Measurements")
                        .HasForeignKey("ReportingDeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EnvironmentWatch.Models.ReportingDevice", b =>
                {
                    b.HasOne("EnvironmentWatch.Models.DeviceType", "DeviceType")
                        .WithMany("ReportingDevices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnvironmentWatch.Models.Location", "Location")
                        .WithMany("ReportingDevices")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
